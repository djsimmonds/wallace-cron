#!/bin/bash

# written: 20130312
# last updated: 20130508
# CHANGELOG
  # 20130508
    # volumes and scanID now in parent script, so that process functions can be used for all tasks

set -e # stop if any error occurs
set -x # print out progress on the script

. ${FSLDIR}/etc/fslconf/fsl.sh # prevents error from occurring when trying to run BET

#volumes=192 # length of run
#scanID="SpatialWM_v1_run"

# initial variables
scriptName=processFMRI_COG
tempStatus=$dirProcess/$id/$date/.${scan}_temp
exitStatus=error
exitText="script exited early"

# if script exits with error, create appropriate status file and clean up
function cleanup {
  echo "$session $id $date $scan $exitText" | tee -a $tempStatus
  date "+%F %H:%M:%S" | tee -a $tempStatus # time stamp of script end
  ls -ahl $dirProcess/$id/$date/${scan}* 2>/dev/null | tee -a $tempStatus # print analysis folder contents to status file, if present
  cat $dirProcess/$id/$date/${scan}*/preprocessFunctional.log 2>/dev/null | tee -a $tempStatus # print preprocessing log contents to status file, if present
  set | tee -a $tempStatus # print out shell/environment variables
  mv $tempStatus $dirProcess/$id/$date/.${scan}_${exitStatus} # renames status file appropriately
  scp $dirProcess/$id/$date/.${scan}_${exitStatus} $ipCopy:/$dirCopy/$id/$date/ # copies status file to dirCopy
  rm -rf $dirProcess/$id/$date/${scan}* # remove analysis files
}

# create temp status file, version and time stamp
date "+%F %H:%M:%S" | tee $tempStatus
echo $scriptName | tee -a $tempStatus
grep "last updated" $dirScripts/$scriptName | tee -a $tempStatus
echo $session $id $date $scan | tee -a $tempStatus

# set trap to run when script exits
trap cleanup EXIT

# delete any old analysis in dirProcess and dirCopy for this scan (due to cleanup, should be no files in dirProcess; however, including command to be safe)
rm -f $dirProcess/$id/$date/.${scan}_{complete,error,missing,skip}
ssh $ipCopy rm -f $dirCopy/$id/$date/.${scan}_{complete,error,missing,skip}
rm -rf $dirProcess/$id/$date/$scan
ssh $ipCopy rm -rf $dirCopy/$id/$date/$scan

# location of raw data
cd $dirSource

# if no scan found
if [ ! -d $scanDir ]; then
  echo "no scan found for $scan" | tee -a $tempStatus
  exitStatus=missing
  exit 1
else
  dicoms=$( ls $scanDir/*.dcm | wc -w )
  if [ ! $dicoms -eq $volumes ]; then
    echo "scan length of $dicoms volumes is incorrect (${scanDir})" | tee -a $tempStatus
    exit 1
  fi  
fi

# copy files to processing directory
mkdir -p $dirProcess/$id/$date/$scan
rsync -avz $scanDir/*.dcm $dirProcess/$id/$date/$scan/

# run preprocessing
echo preprocessFunctional | tee -a $tempStatus
grep "Last updated" $NITOOLS/processing_scripts/preprocessFunctional | tee -a $tempStatus

cd $dirProcess/$id/$date/$scan
preprocessFunctional \
  -dicom "*.dcm" -delete_dicom yes \
  -mprage_bet $dirProcess/$id/$date/MPR/mprage_bet.nii.gz \
  -warpcoef $dirProcess/$id/$date/MPR/mprage_warpcoef.nii.gz \
  -tr 1.5 \
  -threshold 98_2 \
  -hp_filter 80 \
  -rescaling_method 10000_globalmedian \
  -template_brain MNI_3mm \
  -func_struc_dof bbr \
  -slice_acquisition interleaved \
  -motion_sinc y \
  -warp_interpolation spline \
  -constrain_to_template y \
  -cleanup \
  -startover \
  -despike y \
  -st_first

# generate files for censoring high motion volumes
1d_tool.py -infile mcplots.par -show_censor_count -censor_prev_TR -censor_motion 1 mcplots

# error if processing not finished (preprocessed functionals not present or motion analysis didn't run)
if [ ! -e "n*functional*.nii.gz" ] | [ ! -e "mcplots_CENSORTR.txt" ]; then
  echo "ERROR: preprocessing not completed for $session $id $date $scan" | tee -a $tempStatus
  exit 1
fi

# copy files to dirCopy and cleanup dirProcess
rsync -avz $dirProcess/$id/$date/$scan ${ipCopy}:${dirCopy}/$id/$date/
exitStatus="complete"
exitText="complete"
